# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.HomeController.index
# An example controller showing how to use dependency injection
GET     /count                      controllers.CountController.count
# An example controller showing how to write asynchronous code
GET     /message                    controllers.AsyncController.message

GET     /api/user/v1/users/$username<[\w|\.|-]+>                    controllers.UserController.getUserByUsername(username: String)
GET     /api/user/v1/users                    controllers.UserController.getUsersByRequest(page: Option[Int], page_size: Option[Int], sortby: Option[String], order: Option[String])
# PATCH     /api/user/v1/users                    controllers.UserController.getUsers
POST     /api/user/v1/users                    controllers.UserController.registerUser()
PUT     /api/user/v1/users/$userId<[\w|\.|-]+>                    controllers.UserController.updateUser(userId: String)
DELETE     /api/user/v1/users/$userId<[\w|\.|-]+>                    controllers.UserController.deleteUser(userId: String)
# HEAD     /api/user/v1/users                    controllers.UserController.getUsers()



#GET     /api/bookstore/v1/books/$bookId<[\w|\.|-]+>     controllers.BookController.getBookById(bookId: Long)
#GET     /api/bookstore/v1/books                    controllers.BookController.getUsersByRequest(page: Option[Int], page_size: Option[Int], sortby: Option[String], order: Option[String])
# PATCH     /api/bookstore/v1/books                    controllers.BookController.getUsers
#POST     /api/bookstore/v1/books                    controllers.BookController.saveBook(bookId = 0)
#PUT     /api/bookstore/v1/books/$bookId<[\w|\.|-]+>                    controllers.BookController.updateBook(bookId: String)
#DELETE     /api/bookstore/v1/books/$bookId<[\w|\.|-]+>                    controllers.BookController.deleteBook(bookId: String)
# HEAD     /api/user/v1/users                    controllers.UserController.getUsers()

# http://www.ruanyifeng.com/blog/2014/05/restful_api
# GET（SELECT）：从服务器取出资源（一项或多项）。
# POST（CREATE）：在服务器新建一个资源。
# PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。
# PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。
# DELETE（DELETE）：从服务器删除资源。
# HEAD：获取资源的元数据 不常用
# GET     api/v1/user/users/$userId<[\w|\.|-]+>                    controllers.UserController.getUser(userId: String)
# GET     api/v1/user/users                    controllers.UserController.getUsers(page: Option[Int], page_size: Option[Int], sortby: Option[String], order: Option[String])
# PATCH     api/v1/user/users                    controllers.UserController.getUsers
POST     api/v1/user/users                    controllers.UserController.registerUser()
PUT     api/v1/user/users/$userId<[\w|\.|-]+>                    controllers.UserController.updateUser(userId: String)
DELETE     api/v1/user/users/$userId<[\w|\.|-]+>                    controllers.UserController.deleteUser(userId: String)
# HEAD     api/v1/user/users                    controllers.UserController.getUsers()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
